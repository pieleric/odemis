SECOMv2: {
    class: Microscope,
    role: secom,
    children: ["Light Source", "SEM E-beam", "White Light",
               "Optical Objective", "Optical Emission Filter",
               "Camera", "SEM Detector", # "SEM Focus",
               "Sample Stage", "Objective Stage", "Optical Focus"],
}

# "Light Source": {
#     class: lle.FakeLLE,
#     role: light,
#     init: {
#         port: "/dev/ttyFTDI*",
#         # source name -> 99% low, 25% low, centre, 25% high, 99% high wavelength in m
#         # Values are from vendor: http://lumencor.com/products/filters-for-spectra-x-light-engines/
#         sources: {"UV": [379.e-9, 384.e-9, 390.e-9, 396.e-9, 401.e-9], # 390/22
#                   "cyan": [472.e-9, 479.e-9, 485.e-9, 491.e-9, 497.e-9], # 485/25
#                   "green": [544.e-9, 552.e-9, 560.e-9, 568.e-9, 576.e-9], # 560/32
#                   "red": [638.e-9, 643.e-9, 648.e-9, 653.e-9, 658.e-9], # 648/20
#                  }
#         },
#         # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
#     affects: ["Camera"],
# }

# Light = LedHub + DAQ board controlled voltage

"Light Source": {
    class: emitter.MultiplexLight,
    role: light,
    children: {
        subsource0: "LedHUB",
        subsource1: "Rough light",
    },
    # The light is reflected via a Semrock FF410/504/582/669-DI01-25X36
    affects: ["Camera"],
}

"LedHUB": {
    class: omicronxx.HubxX,
    role: null,
    init: {
        port: "/dev/fakehub",
        #port: "/dev/ttyFTDI*",
    },
}

# USB-Dux controlled light source
# To simulate it with comedi_test, run:
# sudo comedi_config /dev/comedi1 comedi_test 1000,1000
"Rough light": {
    class: pwrcomedi.Light,
    role: null,
    init: {
        # device: "/dev/comedi/usbdux", # For real USB-Dux
        device: "/dev/comedi1", # For simulator
        channels: [2, 0], # 0-> 3 = pins 9->12 if voltage -4 -> 4V, 22->25 if voltage 0 -> 4V
        # 99% low, 25% low, centre, 25% high, 99% high wavelength in m
        spectra: [[615.e-9, 625.e-9, 633.e-9, 640.e-9, 650.e-9],
                  [525.e-9, 540.e-9, 550.e-9, 555.e-9, 560.e-9]],
        # Relation curve of voltage -> power, as linear segments
        pwr_curve: [
            # Source 0
            {
                -3: 0, # V -> W
                3: 100.e-3,
            },
            # Source 1
            {# Missing 0W => 0V -> 0W
                0.1: 10.e-3,
                0.3: 20.e-3,
                0.5: 40.e-3,
                0.7: 80.e-3,
                1: 200.e-3,
            },
        ]
    },
}

"White Light": {
    class: simulated.Light,
    role: backlight,
    affects: ["Camera"],
}

# "White Light": {
#     class: blinkstick.WhiteLed,
#     role: backlight,
#     init: {
#         max_power: 0.01, # W
#         inversed: True, # Indicates the leds' behaviour
#     },
#     affects: ["Camera"],
# }

# "SEM Scan Interface": {
#     class: simsem.SimSEM,
#     role: null,
#     init: {
#            image: "simsem-fake-output.h5", # any large 16 bit image is fine
#            drift_period: 5, # s, comment out to disable drift
#     },
#     children: {scanner: "SEM E-beam",
#                detector0: "SEM Detector",
#                focus: "SEM Focus",
#     }
# }
#  
# "SEM E-beam": {
#     # Internal child of SimSEM, so no class
#     role: e-beam,
#     init: {},
#     properties: {
#         dwellTime: 10.e-6, # s
#     },
#     affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
# }
#  
# "SEM Detector": { # aka ETD
#     # Internal child of SimSEM, so no class
#     role: se-detector,
#     init: {},
# }
#  
# "SEM Focus": {
#     # Internal child of SimSEM, so no class
#     role: ebeam-focus,
# }

# Can simulate a SEM connected to a DAQ board by using the comedi_test driver:
# sudo modprobe comedi comedi_num_legacy_minors=4
# sudo modprobe comedi_test
# sudo comedi_config /dev/comedi0 comedi_test 1000000,1000000
"SEM Scan Interface": {
    class: semcomedi.SEMComedi,
    role: null,
    init: {device: "/dev/comedi0"},
    # more detectors can be added, if necessary
    children: {scanner: "SEM E-beam", detector0: "SEM Detector"}
}
 
# Connect:
# X -> AO 0
# Y -> AO 1
# Ground -> AO GND
"SEM E-beam": {
    # Internal child of SEM ExtXY, so no class
    role: e-beam,
    init: {
        channels: [1, 0],
        limits: [[0, 5], [0, 5]],  # V
        park: [-5, -5], # V
        #max_res: [16384, 16384], # px
        settle_time: 10.e-6, # s
        hfw_nomag: 0.25, # m
                # Digital output port mapping on the Delmic scanning box v2:
        # 0 = Relay
        # 1 = Open drain output (Y0.0)
        # 2 = Digital Out 1
        # 3 = Digital Out 0
        # 4 = Status led
        # output ports -> True (indicate scanning) or False (indicate parked) + VA name
        # Conventional VA names are: external, blanker, led, power
        scanning_ttl: {0: [True, "external"], 4: True},
    },
    properties: {
        scale: [8, 8], # (ratio) : start with a pretty fast scan
        dwellTime: 10.e-6, # s
        magnification: 2000, # (ratio)
    },
    affects: ["SEM Detector", "Camera"] # affects the CCD in case of cathodoluminescence
}
 
# Must be connected on AI 5/AI GND
"SEM Detector": { # aka ETD
    # Internal child of Quanta ExtXY, so no class
    role: se-detector,
    init: {
        channel: 0, # 0-> sawtooth waves, 1-> square waves
        limits: [-3, 3] # V
    },
}

"Optical Objective": {
    class: static.OpticalLens,
    role: lens,
    init: {
       mag: 40.0, # ratio, (actually of the complete light path)
       na: 0.95, # ratio, numerical aperture
       ri: 1.0, # ratio, refractive index
    },
    affects: ["Camera"]
}

# Semrock FF01-440/521/607/700
"Optical Emission Filter": {
    class: static.LightFilter,
    role: filter,
    init: {band: [[420.e-9, 460.e-9],
                  [510.e-9, 532.e-9],
                  [590.e-9, 624.e-9],
                  [677.e-9, 723.e-9]]}, # m,m
    affects: ["Camera"]
}

# Axes: X is horizontal on screen (going left->right), physical: far->close when looking at the door
#       Y is vertical on screen (going bottom->top), physical: left->right when looking at the door
"Camera": {
    class: andorcam2.FakeAndorCam2,
    role: ccd,
    init: {
        device: 0,
        image: "andorcam2-fake-clara.tiff",
    },
    properties: {
        exposureTime: 0.3, # s
        # targetTemperature: -40, # Â°C
    }
}

# Use 3 MultiplexActuators to separate the axes of the PIGCS over different roles

# Axes should be synchronized with the camera
# Stage axes are moving the sample, so they should opposite direction than convention
# (so the stage "position" is the current position observed)
"Sample Stage": {
    class: actuator.MultiplexActuator,
    role: stage,
    affects: ["Camera", "SEM E-beam"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "sx", "y": "sy"},
    },
}

"Objective Stage": {
    class: actuator.MultiplexActuator,
    role: align,
    affects: ["Camera"],
    children: {"x": "Stage Actuators", "y": "Stage Actuators"},
    init: {
        axes_map: {"x": "ox", "y": "oy"},
    },
}

# Axis Z: (Physical) bottom->top when looking at the door
#         (On screen) bottom->top (so distance to sample is smaller when going up)
"Optical Focus": {
    class: actuator.MultiplexActuator,
    role: focus,
    affects: ["Camera"],
    children: {"z": "Stage Actuators"},
    init: {
        axes_map: {"z": "oz"}
    },
}

# Network should be set up and the C-863 should be configured for DHCP.
# Each E-861 should be configured for the right stage.
# PI E-861 addresses and stage configuration:
# optical X = 1 (open loop)
# optical Y = 2 (open loop)
# optical Z = 3 (closed loop)
# stage X = 4 (closed loop)
# stage Y = 5 (closed loop)

"Stage Actuators": {
    class: pigcs.FakeBus,
    role: null,
    init: {
        port: "/dev/fake",
        # axis -> controller, channel, closed-loop?
        axes: {"ox": [1, 1, False], "oy": [2, 1, False],
               "oz": [3, 1, True],
               "sx": [4, 1, True], "sy": [5, 1, True]},
        inverted: ["ox", "oy", "oz", "sy"], # sx is good
        #dist_to_steps: {"ox": 100000, "oy": 100000}, # step/m
        # automatically turn off encoders for SX/SY to avoid vibrations
        auto_suspend: {"oz": 1, "sx": 1, "sy": 1}, # s
    },
}
